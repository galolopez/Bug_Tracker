@model Bug_Tracker.Models.Ticket

@{
    ViewBag.Title = "Edit";
}

<h2>Edit Tickets</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        @if (Model.AssignedUserId == null)
        {
            <div class="alert alert-warning alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>Warning!</strong> You must assign a user before editing disabled fields!
            </div>
        }

        <div style="padding-bottom: 40px; padding-left: 122px">
            @Html.ActionLink("Details", "Details", new { id = Model.Id }, new { @class = "btn btn-default" })
            @Html.ActionLink("Add Comment", "Create", "TicketComments", new { id = Model.Id }, new { @class = "btn btn-success" })
            @Html.ActionLink("Add Attachment", "Create", "TicketAttachments", new { id = Model.Id }, new { @class = "btn btn-primary" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectId, "Project", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProjectId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketTypeId, "Ticket Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.AssignedUserId == null)
                {
                    @Html.HiddenFor(model => model.TicketTypeId)
                    @Html.DropDownList("TicketTypeId", null, htmlAttributes: new { @class = "form-control", disabled = "disable" })
                }
                else
                {
                    @Html.DropDownList("TicketTypeId", null, htmlAttributes: new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.TicketTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketPriorityId, "Ticket Priority", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.AssignedUserId == null)
                {
                    @Html.HiddenFor(model => model.TicketPriorityId)
                    @Html.DropDownList("TicketPriorityId", null, htmlAttributes: new { @class = "form-control", disabled = "disable" })
                }
                else
                {
                    @Html.DropDownList("TicketPriorityId", null, htmlAttributes: new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.TicketPriorityId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TicketStatusId, "Ticket Status", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.AssignedUserId == null)
                {
                    @Html.HiddenFor(model => model.TicketStatusId)
                    @Html.DropDownList("TicketStatusId", null, htmlAttributes: new { @class = "form-control", disabled = "disable" })
                }
                else
                {
                    @Html.DropDownList("TicketStatusId", null, htmlAttributes: new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.TicketStatusId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @rows="5", cols="50" })
                @*@Html.TextAreaFor(model => model.Description, new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OwnerUserId, "Owner User", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.OwnerUserId)
                @Html.DisplayFor(model => model.OwnerUser.DisplayName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AssignedUserId, "Assigned User", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AssignedUserId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AssignedUserId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Created)
                @Html.DisplayFor(model => model.Created, "", new { @class = "text-danger" })
            </div>
        </div>
        
        @if (Model.AssignedUserId != null)
        { 
            <div class="form-group">
                @Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.HiddenFor(model => model.Updated)
                    @Html.DisplayFor(model => model.Updated, "", new { @class = "text-danger" })
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
</div>
